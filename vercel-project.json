{
  "project": {
    "name": "repositorio-codigo",
    "version": "0.1.0",
    "files": {
      "package.json": {
        "name": "repositorio-codigo",
        "version": "0.1.0",
        "private": true,
        "dependencies": {
          "lucide-react": "^0.263.1",
          "react": "^18.2.0",
          "react-dom": "^18.2.0",
          "react-scripts": "5.0.1"
        },
        "scripts": {
          "start": "react-scripts start",
          "build": "react-scripts build",
          "test": "react-scripts test",
          "eject": "react-scripts eject"
        },
        "eslintConfig": {
          "extends": [
            "react-app",
            "react-app/jest"
          ]
        },
        "browserslist": {
          "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
          ],
          "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
          ]
        }
      },
      "public/index.html": {
        "content": "<!DOCTYPE html>\n<html lang=\"es\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Repositorio personal de c√≥digo\" />\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <title>Mi Repositorio de C√≥digo</title>\n  </head>\n  <body>\n    <noscript>Necesitas habilitar JavaScript para ejecutar esta aplicaci√≥n.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>"
      },
      "public/manifest.json": {
        "content": "{\n  \"short_name\": \"Repositorio C√≥digo\",\n  \"name\": \"Mi Repositorio de C√≥digo\",\n  \"icons\": [],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}"
      },
      "src/index.js": {
        "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"
      },
      "src/index.css": {
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}"
      },
      "src/App.js": {
        "content": "import React from 'react';\nimport CodeRepository from './components/CodeRepository';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CodeRepository />\n    </div>\n  );\n}\n\nexport default App;"
      },
      "src/components/CodeRepository.js": {
        "content": "import React, { useState, useEffect } from 'react';\nimport { Trash2, Edit, Save, Plus, Copy, Search } from 'lucide-react';\n\n// Componente principal\nconst CodeRepository = () => {\n  // Estados para manejar los snippets y la interfaz\n  const [snippets, setSnippets] = useState([]);\n  const [currentCode, setCurrentCode] = useState('');\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [language, setLanguage] = useState('javascript');\n  const [editingId, setEditingId] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Cargar snippets del localStorage al iniciar\n  useEffect(() => {\n    const savedSnippets = localStorage.getItem('codeSnippets');\n    if (savedSnippets) {\n      setSnippets(JSON.parse(savedSnippets));\n    }\n    \n    // Detectar preferencia de tema oscuro\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    setDarkMode(prefersDark);\n  }, []);\n\n  // Guardar snippets en localStorage cuando cambian\n  useEffect(() => {\n    localStorage.setItem('codeSnippets', JSON.stringify(snippets));\n  }, [snippets]);\n\n  // Funci√≥n para guardar un nuevo snippet o actualizar uno existente\n  const saveSnippet = () => {\n    if (!currentCode.trim() || !title.trim()) return;\n\n    if (editingId !== null) {\n      // Actualizar snippet existente\n      setSnippets(snippets.map(s => \n        s.id === editingId ? { ...s, code: currentCode, title, description, language } : s\n      ));\n      setEditingId(null);\n    } else {\n      // Crear nuevo snippet\n      const newSnippet = {\n        id: Date.now(),\n        code: currentCode,\n        title,\n        description,\n        language,\n        createdAt: new Date().toISOString()\n      };\n      setSnippets([newSnippet, ...snippets]);\n    }\n\n    // Limpiar formulario\n    setCurrentCode('');\n    setTitle('');\n    setDescription('');\n    setLanguage('javascript');\n  };\n\n  // Funci√≥n para eliminar un snippet\n  const deleteSnippet = (id) => {\n    setSnippets(snippets.filter(s => s.id !== id));\n  };\n\n  // Funci√≥n para editar un snippet\n  const editSnippet = (snippet) => {\n    setCurrentCode(snippet.code);\n    setTitle(snippet.title);\n    setDescription(snippet.description || '');\n    setLanguage(snippet.language);\n    setEditingId(snippet.id);\n  };\n\n  // Funci√≥n para copiar c√≥digo al portapapeles\n  const copyToClipboard = (code) => {\n    navigator.clipboard.writeText(code);\n  };\n\n  // Filtrar snippets seg√∫n t√©rmino de b√∫squeda\n  const filteredSnippets = snippets.filter(snippet => \n    snippet.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    snippet.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    snippet.code.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Funci√≥n para cambiar el tema\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  return (\n    <div className={`min-h-screen p-4 ${darkMode ? 'bg-gray-900 text-gray-100' : 'bg-gray-100 text-gray-800'}`}>\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Encabezado */}\n        <header className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-3xl font-bold\">Mi Repositorio de C√≥digo</h1>\n          <button \n            onClick={toggleDarkMode}\n            className={`px-3 py-1 rounded-md ${darkMode ? 'bg-gray-700 text-yellow-400' : 'bg-gray-300 text-gray-800'}`}\n          >\n            {darkMode ? '‚òÄÔ∏è Modo Claro' : 'üåô Modo Oscuro'}\n          </button>\n        </header>\n\n        {/* Formulario para nuevo snippet */}\n        <div className={`mb-8 p-6 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\n          <div className=\"flex items-center mb-4\">\n            <h2 className=\"text-xl font-semibold\">\n              {editingId !== null ? 'Editar Snippet' : 'Nuevo Snippet'}\n            </h2>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <label className=\"block mb-1 font-medium\">T√≠tulo *</label>\n              <input\n                type=\"text\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                className={`w-full p-2 border rounded-md ${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-300'}`}\n                placeholder=\"Ej: Funci√≥n para ordenar array\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block mb-1 font-medium\">Lenguaje</label>\n              <select\n                value={language}\n                onChange={(e) => setLanguage(e.target.value)}\n                className={`w-full p-2 border rounded-md ${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-300'}`}\n              >\n                <option value=\"javascript\">JavaScript</option>\n                <option value=\"python\">Python</option>\n                <option value=\"java\">Java</option>\n                <option value=\"csharp\">C#</option>\n                <option value=\"php\">PHP</option>\n                <option value=\"html\">HTML</option>\n                <option value=\"css\">CSS</option>\n                <option value=\"sql\">SQL</option>\n                <option value=\"bash\">Bash</option>\n                <option value=\"other\">Otro</option>\n              </select>\n            </div>\n          </div>\n          \n          <div className=\"mb-4\">\n            <label className=\"block mb-1 font-medium\">Descripci√≥n</label>\n            <input\n              type=\"text\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className={`w-full p-2 border rounded-md ${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-300'}`}\n              placeholder=\"Descripci√≥n opcional del c√≥digo\"\n            />\n          </div>\n          \n          <div className=\"mb-4\">\n            <label className=\"block mb-1 font-medium\">C√≥digo *</label>\n            <textarea\n              value={currentCode}\n              onChange={(e) => setCurrentCode(e.target.value)}\n              className={`w-full p-2 border rounded-md font-mono text-sm h-40 ${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-300'}`}\n              placeholder=\"Pega tu c√≥digo aqu√≠...\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end\">\n            <button\n              onClick={saveSnippet}\n              disabled={!currentCode.trim() || !title.trim()}\n              className={`flex items-center px-4 py-2 rounded-md ${\n                !currentCode.trim() || !title.trim()\n                  ? 'bg-gray-400 cursor-not-allowed'\n                  : darkMode \n                    ? 'bg-blue-600 hover:bg-blue-700' \n                    : 'bg-blue-500 hover:bg-blue-600'\n              } text-white`}\n            >\n              <Save size={18} className=\"mr-1\" />\n              {editingId !== null ? 'Actualizar' : 'Guardar'}\n            </button>\n          </div>\n        </div>\n\n        {/* Barra de b√∫squeda */}\n        <div className={`relative mb-6 ${darkMode ? 'text-white' : 'text-gray-800'}`}>\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <Search size={18} />\n          </div>\n          <input\n            type=\"text\"\n            className={`w-full pl-10 pr-4 py-2 rounded-lg border ${\n              darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-300'\n            }`}\n            placeholder=\"Buscar snippets...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n\n        {/* Lista de snippets */}\n        {filteredSnippets.length === 0 ? (\n          <div className={`text-center py-10 rounded-lg ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-md`}>\n            <p className=\"text-lg\">\n              {snippets.length === 0 \n                ? 'No hay snippets guardados. ¬°A√±ade uno nuevo!'\n                : 'No se encontraron snippets que coincidan con tu b√∫squeda.'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 gap-6\">\n            {filteredSnippets.map(snippet => (\n              <div \n                key={snippet.id} \n                className={`rounded-lg shadow-md overflow-hidden ${darkMode ? 'bg-gray-800' : 'bg-white'}`}\n              >\n                <div className={`p-4 flex justify-between items-center ${\n                  darkMode \n                    ? snippet.language === 'javascript' ? 'bg-yellow-900' :\n                      snippet.language === 'python' ? 'bg-blue-900' :\n                      snippet.language === 'java' ? 'bg-orange-900' :\n                      snippet.language === 'csharp' ? 'bg-green-900' : 'bg-gray-700'\n                    : snippet.language === 'javascript' ? 'bg-yellow-100' :\n                      snippet.language === 'python' ? 'bg-blue-100' :\n                      snippet.language === 'java' ? 'bg-orange-100' :\n                      snippet.language === 'csharp' ? 'bg-green-100' : 'bg-gray-100'\n                }`}\n                >\n                  <div>\n                    <h3 className=\"font-bold text-lg\">{snippet.title}</h3>\n                    {snippet.description && (\n                      <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>{snippet.description}</p>\n                    )}\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <button \n                      onClick={() => copyToClipboard(snippet.code)}\n                      className={`p-1 rounded-md ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-200'}`}\n                      title=\"Copiar c√≥digo\"\n                    >\n                      <Copy size={18} />\n                    </button>\n                    <button \n                      onClick={() => editSnippet(snippet)}\n                      className={`p-1 rounded-md ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-200'}`}\n                      title=\"Editar snippet\"\n                    >\n                      <Edit size={18} />\n                    </button>\n                    <button \n                      onClick={() => deleteSnippet(snippet.id)}\n                      className={`p-1 rounded-md ${darkMode ? 'hover:bg-gray-700 text-red-400' : 'hover:bg-gray-200 text-red-500'}`}\n                      title=\"Eliminar snippet\"\n                    >\n                      <Trash2 size={18} />\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"p-4\">\n                  <pre className={`whitespace-pre-wrap font-mono text-sm overflow-x-auto p-3 rounded-md ${\n                    darkMode ? 'bg-gray-900' : 'bg-gray-50'\n                  }`}>\n                    {snippet.code}\n                  </pre>\n                </div>\n                \n                <div className={`px-4 py-2 text-xs ${darkMode ? 'text-gray-400 border-t border-gray-700' : 'text-gray-500 border-t border-gray-200'}`}>\n                  <span>{snippet.language.charAt(0).toUpperCase() + snippet.language.slice(1)} ‚Ä¢ </span>\n                  <span>Creado: {new Date(snippet.createdAt).toLocaleDateString()}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CodeRepository;"
      },
      "tailwind.config.js": {
        "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}"
      },
      "postcss.config.js": {
        "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}"
      },
      "vercel.json": {
        "content": "{\n  \"buildCommand\": \"npm run build\",\n  \"installCommand\": \"npm install\",\n  \"framework\": \"create-react-app\"\n}"
      }
    }
  }
}